[tool.black]
line-length = 100

[tool.pytest.ini_options]
addopts = ["-vvv", "-n", "1", "--log-level", "WARNING", "--color", "yes"]
filterwarnings = ['ignore:AnsibleCollectionFinder has already been configured']
testpaths = ["tests"]

[semantic_release]
allow_zero_version = false
tag_format = "{version}"
version_variables = [
    "galaxy.yml:version:tf",                   # Tag format
]
assets = []
build_command = "./.gitlab/ci-utils/build.sh"
build_command_env = []
commit_message = "Semantic Release - Tag {version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
no_git_verify = false

[semantic_release.branches.main]
match = "*"
prerelease_token = "rc"
prerelease = false

[semantic_release.changelog]
exclude_commit_patterns = ['test', 'ci']
mode = "init"
insertion_flag = "<!-- version list -->"
template_dir = "templates"

[semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = false

[semantic_release.commit_author]
env = "SEMANTIC_RELEASE_AUTHOR"
default = "semantic-release <semantic-release>"

[semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
other_allowed_tags = ["build", "chore", "ci", "docs", "style", "refactor", "test"]
allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = false

[semantic_release.remote]
name = "origin"
type = "gitlab"
# Will look for env GITLAB_TOKEN when type = gitlab
# A Project Access Token should exist with permission to push/tag/release
ignore_token_for_push = false
insecure = false

[semantic_release.publish]
dist_glob_patterns = ["infra-openshift_virtualization_migration-*.tar.gz"]
upload_to_vcs_release = true
