---
- name: _manage_secret_keys | Verify SSH path location or inline content provided
  ansible.builtin.assert:
    that:
      - >
        ssh_key['path'] | default("", true) | length > 0 or
        ssh_key['content'] | default("", true) | length > 0
      - >
        (ssh_key['path'] | default("", true) | length > 0 and
        ssh_key['content'] | default("", true) | length == 0)
        or
        (ssh_key['path'] | default("", true) | length == 0 and
        ssh_key['content'] | default("", true) | length > 0)
    quiet: true
    fail_msg: Path to SSH Key ('path'), or inline key content ('content') must be provided

- name: _manage_secret_keys | Process Key from Path
  when: "'path' in ssh_key"
  block:
    - name: _manage_secret_keys | Get SSH Key Path information
      ansible.builtin.stat:
        path: "{{ ssh_key['path'] }}"
      register: ssh_key_path_stat

    - name: _manage_secret_keys | Verify SSH Key Path Exists
      ansible.builtin.assert:
        that:
          - ssh_key_path_stat.stat.exists
        quiet: true
        fail_msg: "SSH Key at path '{{ ssh_key['path'] }}' does not exist"

    - name: _manage_secret_keys | Add 'path' Key to Dict
      ansible.builtin.set_fact:
        vm_ssh_secret_keys: >-
          {{
            vm_ssh_secret_keys
            | default({})
            | ansible.builtin.combine({
              ('key' + (ssh_key_idx + 1) | string):
                lookup('ansible.builtin.file', ssh_key['path'])
            })
          }}

- name: _manage_secret_keys | Process Key from Path
  when: "'content' in ssh_key"
  block:
    - name: _manage_secret_keys | Add 'content' Key to Dict
      ansible.builtin.set_fact:
        vm_ssh_secret_keys: "{{ vm_ssh_secret_keys | default({}) | ansible.builtin.combine({'key' + (ssh_key_idx + 1) | string: ssh_key['content']}) }}" # noqa: yaml[line-length]
...
